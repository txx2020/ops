#!/bin/bash
# 设置时区
timedatactl set-timezone Asia/Shanghai

# 关闭swap
swapoff -a

# 修改主机名
hostnamectl set-hostname test2

# 安装ipvs
yum install -y ipvsadm

# 开启路由转发
cat <<EOF >> /etc/sysctl.conf
net.ipv4.ip_forward = 1
EOF
sysctl -p 

# 加载bridge
yum install -y epel-release 
yum install -y bridge-utils
modpreobe br_netfilter
cat >> /etc/modules-load.d/k8s.conf << EOF
br_netfilter
EOF
cat <<EOF >> /etc/sysctl.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl -p

# 添加docker-ce源并安装
dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo
yum update
yum install -y docker-ce docker-compose #docker-ce-cli containerd.io
# "data-root": "", 切换docker的路径 
cat <<EOF>> /etc/docker/daemon.json 
{
  "default-ipc-mode": "shareable",
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
     "max-size": "100m",
     "max-file": "100"
  },
  "insecure-registries": ["control-server.com"],
  "registry-mirrors": ["https://kfp63jaj.mirror.aliyuncs.com"]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d
systemctl daemon-reload && systemctl restart docker && systemctl enable docker

# 安装cri-docker，配合k8s
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.9/cri-dockerd-0.3.9.amd64.tgz
tar -xf cri-dockerd-0.3.9.amd64.tgz
cp cri-dockerd/cri-dockerd /usr/bin/
chmod +x /usr/bin/cri-dockerd

# 配置cri-docker的服务
cat <<EOF >> /usr/lib/systemd/system/cri-docker.service 
[Unit]
Description=cri interface for docker app container engine
Documentation=https://docs.mirantis.com
After=network-online.target firewalld.service docker.service
Wants=network-online.target
Requires=cri-docker.socket
[Service]
Type=notify
ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.8
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always
StartLimitBurst=3
StartLimitInterval=60s
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TasksMax=infinity
Delegate=yes
Killmode=process
[Install]
WantedBy=multi-user.target
EOF

cat <<EOF >> /usr/lib/systemd/system/cri-docker.socket  
[Unit]
Description=cri docker socket for the api 
Partof=cri-docker.service
[Socket]
ListenStream=%t/cri-dockerd.sock
SocketMode=0600
SocketUser=root
SocketGroup=docker
[Install]
WantedBy=sockets.target
EOF

# 启动cri-docker 服务
systemctl daemon-reload
systemctl enable cri-docker
systemctl start cri-docker
systemctl is-active cri-docker

# 安装kubeadm 源
cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.31/rpm/
enabled=1
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.31/rpm/repodata/repomd.xml.key
EOF
setenforce 0
yum install -y kubelet kubeadm kubectl
systemctl enable kubelet && systemctl start kubelet



cat >> /etc/hosts << EOF
10.10.10.13 test2
10.10.10.14 test3
10.10.10.15 test4
EOF

cat >> /etc/modules-load.d/k8s.conf << EOF
br_netfilter
EOF

cat <<EOF >> /etc/sysctl.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_nonlocal_bind = 1
net.ipv4.ip_forward = 1
vm.swappiness=0
EOF


# 初始化

kubeadm init \
        --apiserver-advertise-address=10.10.10.2 \
        --image-repository registry.aliyuncs.com/google_containers \
        --kubernetes-version 1.31.0 \
        --service-cidr=10.20.0.0/12 \
        --pod-network-cidr=10.244.0.0/16 \
        --ignore-preflight-errors=all \
        --cri-socket unix:///var/run/cri-dockerd.sock

root: U4508KWt
user: qtCc3jOI