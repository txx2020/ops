
library(pROC)  # 导入pROC包用于绘制ROC曲线
library(tableone)  # 导入tableone包用于创建描述性统计表
library(readxl)  # 导入readxl包用于读取Excel文件

# 清除内存中的 data2 对象，避免命名冲突
rm(data2)

# 从指定路径读取Excel的第二个工作表，存储为data2
data2 <- read_xlsx("D:\\test\\验证队列.xlsx", sheet = 2)

# 构建逻辑回归模型，预测"预后不良"，自变量为多项指标，使用二项分布
mod2 <- glm(预后不良 ~ 有无呕血 + 意识状态改变 + 肾功能不全 + 白蛋白降低 + INR延长, family = "binomial", data = data2)

# 输出模型的摘要信息，包括系数、标准误、z值和p值等
summary(mod2)

# 计算预测概率，返回响应变量的预测值
pre2 <- predict(mod2, type = "response", newdata = data2)

# 计算ROC曲线，使用真实标签和预测概率
ROC2 <- roc(data2$预后不良, pre2)



####################
# 两个线集中在一起 #
####################


# 创建空白图
plot(0, 0, type = "n", xlab = "False Positive Rate (1 - Specificity)", 
     ylab = "True Positive Rate (Sensitivity)", 
     xlim = c(0, 1), ylim = c(0, 1), 
     main = "ROC Curve (Model Predictions)")

# 计算线性组合，根据各指标加权求和
data2$linear_pred <- -3.377 + 0.806 * data2$有无呕血 + 1.152 * data2$意识状态改变 +
  0.712 * data2$肾功能不全 + 0.973 * data2$白蛋白降低 +
  0.899 * data2$INR延长

# 计算预测概率，应用logit函数
data2$predicted_prob <- 1 / (1 + exp(-data2$linear_pred))

# 输出预测结果的前几行
head(data2$predicted_prob)

# 计算ROC曲线，使用真实标签和预测概率
roc_curve <- roc(data2$预后不良, data2$predicted_prob)  

# 绘制ROC曲线，X轴为假阳性率，Y轴为真阳性率
lines(1 - roc_curve$specificities, roc_curve$sensitivities, col = "black", lwd = 2)  

# 在图中添加AUC值文本
text(0.5, 0.15, paste("AUC (验证集):", format(roc_curve$auc, nsmall = 3)), pos = 4)  


# "AIMS65评分", "PRS评分", "GBS评分", "ABC评分", "Rockall评分","mGBS评分","JBS评分")
scores <- c("GBS评分", "ABC评分","AIMS65评分", "PRS评分","mGBS评分","JBS评分")
scores1 <- c( "GBS评分", "ABC评分","AIMS65评分", "PRS评分","mGBS评分","JBS评分","模型")


for (score in scores) {
  if (score %in% names(data2)) {
    data2[[score]] <- as.numeric(data2[[score]])
  }
}


# 定义分析点和评分的列名
outcomes <- c("预后不良")


# 单独绘制每个分析点下的5个评分的ROC曲线
draw_roc_combined <- function(outcome) {
  # 筛选出有效的目标结果列
  valid_data <- data2[!is.na(data2[[outcome]]), ]
  
  if (nrow(valid_data) == 0) {
    print(paste("No valid data for", outcome))
    return(NULL)
  }
  plot(0, 0, type = "n", xlab = "False Positive Rate (1 - Specificity)", 
       ylab = "True Positive Rate (Sensitivity)", xlim = c(0, 1), ylim = c(0, 1), 
       main = paste("ROC Curves for", outcome))
  
  
  
  # 颜色选择
  colors <- rainbow(length(scores1))
  
  # 循环绘制每个评分的ROC曲线
  for (i in seq_along(scores)) {
    score <- scores1[i]
    
    if (!(score %in% names(data2))) {
      next
    }
    
    # 处理评分缺失情况
    score_data <- valid_data[[score]]
    valid_scores <- !is.na(score_data)
    
    if (sum(valid_scores) == 0) {
      next
    }
    
    roc_obj <- roc(valid_data[[outcome]][valid_scores], score_data[valid_scores], direction="<")
    
    # 绘制ROC曲线
    lines(1 - roc_obj$specificities, roc_obj$sensitivities, 
          col = colors[i], lwd = 2)
    lines(1 - roc_curve$specificities, roc_curve$sensitivities, col = "blue", lwd = 2)
    # 计算AUC值
    auc_value <- auc(roc_obj)
    
    # 获取最佳截断点（约登指数）
    best_threshold_index <- which.max(roc_obj$sensitivities + roc_obj$specificities - 1)
    best_threshold <- roc_obj$thresholds[best_threshold_index]
    best_sensitivity <- roc_obj$sensitivities[best_threshold_index]
    best_specificity <- roc_obj$specificities[best_threshold_index]
    youden_index <- best_sensitivity + best_specificity - 1
    
    # 在图形中标注出这些统计值
    text_x <- 0.11 + (i - 1) * 0.12  # x轴位置，从左往右逐步调整
    text_y <- 0.08  # 固定y轴位置
    
  #  text(text_x, text_y, 
  #       paste(score, 
  #             "\nAUC:", round(auc_value, 3), 
  #             "\n最佳截断值:", round(best_threshold, 3), 
  #             "\n特异性:", round(best_specificity, 3), 
  #             "\n灵敏度:", round(best_sensitivity, 3), 
  #             "\n约登指数:", round(youden_index, 3)), 
  #       col = colors[i], cex = 2, adj = c(0.5, 0))    
    
  }
  
  # 添加图例  cex调整字体大小
  legend("bottomright", legend = scores1, col = colors, lwd = 2, cex = 1)
}




#################
file_index <- 1  # 初始化文件序号

output_dir <- "D:\\test\\ROC_Plots_20241010\\"  # 定义输出目录
if (!dir.exists(output_dir)) {
  dir.create(output_dir)
}

for (outcome in outcomes) {
  # 规范化文件名
  normalized_outcome <- gsub("[^[:alnum:]_]", "_", outcome)
  
  # 设置输出文件路径，使用序号前缀
  output_file <- paste0(output_dir, sprintf("%03d", file_index), "_", normalized_outcome, "_ROC.png")
  
  # 打开PNG设备，设置正方形尺寸
  png(output_file, width = 800, height = 800)
  
  # 绘制ROC曲线
  draw_roc_combined(outcome)
  
  # 关闭PNG设备
  dev.off()
  
  cat("ROC plot saved to:", output_file, "\n")
  
  # 序号递增
  file_index <- file_index + 1
}

