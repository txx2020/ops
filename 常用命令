 cat hdfs-site.xml  | grep -vE '^#|^$'|grep -E '<|-'

# openvpn 初始化命令
docker-compose run --rm openvpn ovpn_genconfig -u udp://公网IP

# 生成配置文件
docker-compose run --rm openvpn ovpn_initpki
# 会输入密码

 # 添加openvpn 用户
 docker-compose run --rm openvpn easyrsa build-client-full  weizhen
# 中间会输入私钥和公钥
 docker-compose run --rm openvpn ovpn_getclient  weizhen  > ./weizhen.ovpn


# docker-compose run --rm openvpn easyrsa build-client-full tianxiaoxiao   nopass # 无密码版
 # 更改端口，因为在容器内，所以不太一样
 sed -i 's/1194/49755/g' *ovpn


公钥：1uijsdkjijnkj*&*hh%^g

# 撤销用户使用
docker-compose run --rm openvpn easyrsa revoke weizhen
sed -i '/<\/tls-auth>/a sndbuf 0\nrcvbuf 0'  /usr/local/bin/ovpn_getclient
sndbuf 0  #新增优化项
rcvbuf 0   #新增优化项

# 所有流量全部走openvpn
客户端添加：redirect-gateway autolocal

# openvpn 2.5.2版本连接报错解决，用户端配置文件添加
allow-compression yes

#hadoop下载文件
./hdfs dfs -get  /hanyi/检测/1标段下部利旧图片   file:///home/tongtu/bak/hadoop/export
#hadoop 上传文件
./hdfs dfs -put file:///home/tongtu/server/export/1标段下部利旧图片   /hanyi/检测/

#hadoop删除文件
./hdfs dfs -rm -r

#hbase导出表数据
./hbase org.apache.hadoop.hbase.mapreduce.Export emp file:///home/tongtu/bak

#hbase导入表数据
./hbase org.apache.hadoop.hbase.mapreduce.Driver import emp file:///home/tongtu/bak

# hadoop 删除楚天的图片数据
./hadoop fs -ls /EdgeDevice/img | grep '^d' | awk '{print $8}' | grep -E '/EdgeDevice/img/2023-(0[1-9]|10|11|12)-(0[1-9]|[12][0-9]|3[01])' | grep -E '/EdgeDevice/img/2023-(0[1-9]|10|11)-(0[1-9]|[12][0-9]|3[01])|2023-12-0[1-3]' | while read folder; do hadoop fs -rm -r "$folder"; done

#ssh端口转发之前需要做的事情,如果报错可以-vvvvv查看详细信息
/etc/ssh/sshd_config
AllowTcpForwarding no
PermitTunnel no
修改成
AllowTcpForwarding yes
GatewayPorts yes
PermitTunnel yes
# yum 使用代理 /etc/yum.conf,需要先完成下面的操作
proxy=socks5://127.0.0.1:8080 
# 将ssh转发到目标机器，且仅当前机器可连接
/usr/bin/ssh -N -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -R 18080:127.0.0.1:22 10.253.129.43
# 将ssh转发到目标机器，所有机器或同网段机器可连接
/usr/bin/ssh -N -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -R 0.0.0.0:18080:127.0.0.1:22 10.253.129.43
/usr/bin/ssh -N -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -R 10.253.129.43:18080:127.0.0.1:22 10.253.129.43
# 目标机器连接代理
ssh -D 8080 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 localhost -p 18080 # localhost可以改成ip或者0.0.0.0，经过测试无用，最后用的nginx stream转发
# 验证代理是否成功
curl --socks5-hostname localhost:8001 http://www.google.com/ 
# 210 服务器把自身的8080端口转发到10.253.129.13的45666端口
ssh -N -f -R 45666:127.0.0.1:8080 10.253.129.13 # /usr/bin/ssh -N -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -R 8080:127.0.0.1:8080 tongtu-gitlab.com 改进版
ip addr add 192.168.1.210/24 dev eth0 # 为了可以直接使用jenkins中的地址，我就添加了ip
ip addr del 192.168.1.210/24 dev eth0 # eth0是网卡名称,这个网卡必须是真实存在的
# fedora 关闭swap
 systemctl mask swap.target
 systemctl daemon-reload
 fw2XoRhOgyJncMjj

# 把本机文件拷贝到远端
 rsync $RSYNC_OPTIONS "$SRC_DIR" "$DEST_USER@$DEST_HOST:$DEST_DIR"
# 把远端文件拷贝到本机
 rsync $RSYNC_OPTIONS "$SRC_USER@$SRC_HOST:$SRC_DIR" "$DEST_DIR"

# docker 寻找空白的镜像
docker images |grep none  |awk '{print $3}'  |  tr '\n' ' '
docker buildx prune # 清理docker buildx 缓存
ubuntu扩容
lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
resize2fs /dev/ubuntu-vg/ubuntu-lv

# 镜像更新的命令
docker compose pull && docker compose up -d

# docker 把两个架构镜像打包成一个标签
docker manifest create control-server.com/java/openjdk:8u342-slim-buster --amend control-server.com/java/openjdk:x86 --amend control-server.com/java/openjdk:arm

# 上传镜像
docker manifest push  control-server.com/java/openjdk:8u342-slim-buster

# on-my-zsh添加主机名，%m 在%c前面，需要有个空格
vim $ZSH/themes/robbyrussell.zsh-theme

vi .zshrc
bindkey "\e[1~" beginning-of-line  # Home键
bindkey "\e[4~" end-of-line  # End键

# 网络丢包率测试
iperf3 -s # 服务器端安装
iperf3 -c ip # 客户端安装